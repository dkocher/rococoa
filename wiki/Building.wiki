#summary Building Rococoa using Maven.

=Building Rococoa=
==Prequisites==

 * Maven 2
 * XCode 3.0

<p>I build on an early MacBook Pro, running 10.5.2. I haven't yet tried building on PPC. Early 
builds were on Tiger, but I haven't gone back to check that it still does.</p>

==Command-line Build Steps==

{{{
svn checkout https://rococoa.googlecode.com/svn/trunk/rococoa rococoa --username <googleid>
}}}

Build and test with
{{{
mvn test
}}}
If all is successful, you should have a screenful of output, culminating in
{{{
Results :
[surefire] Tests run: 58, Failures: 0, Errors: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 minute 46 seconds
[INFO] Finished at: Fri Feb 22 11:39:09 GMT 2008
[INFO] Final Memory: 5M/10M
[INFO] ------------------------------------------------------------------------
}}}

For some reason the native compile step takes an age to fire up xcodebuild on 
my Leopard MacBook, but then XCode itself takes an age to start as well. Your 
mileage may vary.

==Other interesting Maven goals include==

 * {{{mvn clean}}}
 * {{{mvn site}}} generate javadoc and stuff
 * {{{mvn package}}} to build the distribution.

==Developing using Eclipse and XCode==

To generate an Eclipse project for the Maven build {{{mvn eclipse:eclipse}}}.

This will generate the .classpath and .project files for an Eclipse project, 
that you can import into a workspace. The dependent libraries will be specified
relative to a <em>Classpath Variable</em> <code>M2_REPO</code>. This should be set (
{{{Eclipse/Preferences.../Java/Build Path/Classpath Variables}}}) to 
{{{~/.m2/repository</code>}}}.

<p>If all is well the tests in <code>rococoa/src/test/java</code> should pass when
run with Eclipse's JUnit test runner.